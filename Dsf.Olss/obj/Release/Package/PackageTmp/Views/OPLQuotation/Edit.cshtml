@model Dsf.Olss.Models.OPLQuotationViewModel
@{
    ViewBag.Title = "Edit Operating Lease Quotation";
}

@section Styles{
    <link rel="stylesheet" href=@Url.Content("~/Content/ui-framework/js/datatables/datatables.css") type="text/css" />
}

<a href="@Url.Action("Index", "OPLQuotation")" class="btn btn-white"><i class="fa fa-chevron-left"></i> Back</a>
@if (Model.IsSubmitted == true && Model.IsDraft == false && Model.IsValid == false)
{
    <label class="label label-info label-lg pull-right">submitted</label>
}

@if (Model.IsSubmitted == false && Model.IsDraft == true && Model.IsValid == false)
{
    <label class="label label-default label-lg pull-right">draft</label>
}

@if (Model.IsSubmitted == false && Model.IsDraft == false && Model.IsValid == true)
{
    <label class="label label-success label-lg pull-right">valid</label>
}
<hr/>
<div class="panel label-panel">
    <div class="row" style="padding-bottom:10px;">
        <div class="col-xs-6 col-sm-3">
            <div class="font-bold" style="padding-left:15px; float:left;"><i class="fa fa-user text-danger"></i> Created by</div><div style="float:left; padding-left:15px;">@(Model.CreateBy)</div>
        </div>
        <div class="col-xs-6 col-sm-3">
            <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-calendar text-danger"></i> Created Date</div><div style="float: left; padding-left: 15px;">@(String.Format("{0:MM/dd/yyyy}", Model.CreateDate))</div>
        </div>
        <div class="col-xs-6 col-sm-3">
            <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-user text-danger"></i> Last Modified By</div><div style="float: left; padding-left: 15px;">@(Model.LastModifiedBy)</div>
        </div>
        <div class="col-xs-6 col-sm-3">
            <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-calendar text-danger"></i> Last  Modified Date</div><div style="float: left; padding-left: 15px;">@(String.Format("{0:MM/dd/yyyy}", Model.LastModified))</div>
        </div>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { @data_validate = "parsley" }))
{
    @Html.TextBoxFor(o => o.ConnId, null, new { @type = "hidden" })
    <section class="panel">
        <div class="panel-body">

            <div class="row">
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>OPL Calculation Number</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.OPLCalculationNumber, null, new { @class = "form-control", @placeholder = "OPL Calculation Number", @data_required = "true", @readonly = "readonly" })
                            <span class="input-group-btn">
                                <button class="btn btn-white" data-toggle="modal" data-target="#contractModal" type="button" onclick="LoadContract()">...</button>
                            </span>
                        </div><!-- /input-group -->
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @*<label>OPL Proposal Number</label>
                            <div class="input-group">
                                @Html.TextBoxFor(o => o.OPLCalculationNumber, null, new { @class = "form-control", @placeholder = "" })
                                <input type="text" class="form-control" placeholder="OPL Proposal Number">
                                <span class="input-group-btn">
                                    <button class="btn btn-white" type="button">...</button>
                                </span>
                            </div>*@<!-- /input-group -->
                        <label>OPL Quotation Number</label>
                        @Html.TextBoxFor(o => o.OPLProposalNumber, null, new { @class = "form-control", @placeholder = "OPL Proposal Number", @readonly = "readonly" })


                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>OPL Quotation Number</label>
                        @Html.TextBoxFor(o => o.OPLQuotationNumber, null, new { @class = "form-control", @placeholder = "OPL Quotation Number", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Customer Code</label>
                        @Html.TextBoxFor(o => o.CustomerCode, null, new { @class = "form-control", @placeholder = "Customer Code", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Customer Name</label>
                        @Html.TextBoxFor(o => o.CustomerName, null, new { @class = "form-control", @placeholder = "Customer Name", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>OPL Quotation Date (mm/dd/yyyy)</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.OPLQuotationDate, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker-input", @placeholder = "OPL Quotation Date" })
                            <span class="input-group-addon">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Start Date Usage Unit Plan (mm/dd/yyyy)</label>
                        @Html.TextBoxFor(o => o.StartPeriodPlan, "{0:MM/dd/yyyy}", new { @class = "form-control", @placeholder = "Start Period Plan (mm/dd/yyyy)", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>End Date Usage Unit Plan (mm/dd/yyyy)</label>
                        @Html.TextBoxFor(o => o.EndPeriodPlan, "{0:MM/dd/yyyy}", new { @class = "form-control", @placeholder = "End Period Plan (mm/dd/yyyy)", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Lease Period Plan (Months)</label>
                        @Html.TextBoxFor(o => o.LeasePeriodPlan, null, new { @class = "form-control text-right", @placeholder = "Lease Period Plan (Months)", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Valid Until (mm/dd/yyyy)</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.Validuntil, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker-input", @placeholder = "Valid Until", @data_required = "true" })
                            <span class="input-group-addon">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </section>
    <section class="panel">
        <header class="panel-heading font-bold">Basic Information (Product)</header>
        <div class="panel-body">

            <div class="row">
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Product Registration Code</label>
                        @Html.TextBoxFor(o => o.ProductCode, null, new {@class = "form-control", @placeholder = "Product Registration Code", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Brand Code</label>
                        @Html.TextBoxFor(o => o.ProductBrandCode, null, new {@class = "form-control", @placeholder = "Product Brand Code", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Model Name</label>
                        @Html.TextBoxFor(o => o.ModelName, null, new {@class = "form-control", @placeholder = "Product Model Name", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Transmission</label>
                        @Html.TextBoxFor(o => o.Transmission, null, new {@class = "form-control", @placeholder = "Transmission", @readonly = "readonly"})
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">

                    <div class="form-group">
                        <label>Product Type</label>
                        @Html.TextBoxFor(o => o.ProductType, null, new {@class = "form-control", @placeholder = "Product Type", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Brand Name</label>
                        @Html.TextBoxFor(o => o.BrandName, null, new {@class = "form-control", @placeholder = "Product Brand Name", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Model Type</label>
                        @Html.TextBoxFor(o => o.ModelType, null, new {@class = "form-control", @placeholder = "Product Model Type", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Fuel Type</label>
                        @Html.TextBoxFor(o => o.FuelType, null, new {@class = "form-control", @placeholder = "Fuel Type", @readonly = "readonly"})
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">

                    <div class="form-group">
                        <label>Product Category</label>
                        @Html.TextBoxFor(o => o.ProductCategoryName, null, new {@class = "form-control", @placeholder = "Product Category", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Model Code</label>
                        @Html.TextBoxFor(o => o.ModelCode, null, new {@class = "form-control", @placeholder = "Product Model Code", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Product Model Year (yyyy/mm)</label>
                        @Html.TextBoxFor(o => o.ModelYear, null, new {@class = "form-control", @placeholder = "Product Model Year (yyyy/mm)", @readonly = "readonly"})
                    </div>
                    <div class="form-group">
                        <label>Displacement (CC)</label>
                        @Html.TextBoxFor(o => o.Displacement, null, new {@class = "form-control text-right", @placeholder = "Displacement", @readonly = "readonly"})
                    </div>
                </div>
            </div>

        </div>
    </section>

    <section class="panel">
        <header class="panel-heading">Maintenance Additional Information</header>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left; padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsRegMtn, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Regular Maintenance</label></span>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left; padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsSparePart, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Spare Parts</label></span>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left; padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsOilChange, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Oil change</label></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left;padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsRepBatt, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Replacement Battery</label></span>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left;padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsRepTire, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Replacement Tires</label></span>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <span style="float: left; padding-right: 7px;">
                            @Html.CheckBoxFor(x => x.IsCustService, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })
                        </span>
                        <span><label>Customer Service</label></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Maintenance Other 1</label>
                        @Html.TextBoxFor(o => o.MtnOther1, null, new { @class = "form-control", @placeholder = "Maintenance Other 1", @data_maxlength = "200" })
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Maintenance Other 2</label>
                        @Html.TextBoxFor(o => o.MtnOther2, null, new { @class = "form-control", @placeholder = "Maintenance Other 2", @data_maxlength = "200" })
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="panel">
        <header class="panel-heading">Quotation Information</header>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Monthly Installment</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.MonthlyRents, "{0:N0}", new { @class = "form-control currenciesOnly", @placeholder = "Monthly Rents", @data_maxlength = "23", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Down Payment</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.DownPayment, "{0:N0}", new { @class = "form-control currenciesOnly ", @placeholder = "Down Payment", @data_maxlength = "23" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Pre-Paid Month Rent</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.PrepaidMonthsRent, "{0:N0}", new { @class = "form-control currenciesOnly", @placeholder = "Pre-Paid Month Rent", @data_maxlength = "23" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Tax Amount</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.Tax, "{0:N0}", new { @class = "form-control currenciesOnly", @placeholder = "Tax Amount", @data_maxlength = "23" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Expected Delivery Date (mm/dd/yyyy)</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.ExpectedDeliveryDate, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker-input", @placeholder = "Expected Delivery Date (mm/dd/yyyy)" })
                            <span class="input-group-addon">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>

                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Delivery Place</label>
                        @Html.TextBoxFor(o => o.DeliveryPlace, null, new { @class = "form-control", @placeholder = "Delivery Place", @data_maxlength = "100" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="form-group">
                        <label>Additional Items</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.AdditionalItems, null, new {@class = "form-control", @placeholder = "Additional Items", @readonly = "readonly"})
                            <span class="input-group-btn">
                                <button class="btn btn-white" data-toggle="modal" data-target="#additionaModal" type="button" onclick="LoadAdditionalItem()">...</button>
                            </span>
                        </div><!-- /input-group -->
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="form-group">
                        <label>Others</label>
                        @Html.TextBoxFor(o => o.AddEtc, null, new { @class = "form-control", @placeholder = "Others", @data_maxlength = "200", @readonly = "readonly" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="form-group">
                        <label>Remarks</label>
                        @Html.TextBoxFor(o => o.Remarks, null, new { @class = "form-control", @placeholder = "Remarks", @data_maxlength = "200" })
                    </div>
                </div>
            </div>
            @Html.HiddenFor(o => o.IdOPLQuotation)
        </div>
        <div class="panel-footer  bg-light lter">
            @StateButton.QuotationStateButton("edit", Model.IsDraft, Model.IsValid, Model.IsSubmitted)
        </div>
    </section>
}
@{Html.RenderPartial("ModalPopUp");}

@section Scripts{
    <script src="@Url.Content("~/Content/ui-framework/js/parsley/parsley.min.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/datepicker/bootstrap-datepicker.js")"></script>
    <script src="@Url.Content("~/Content/js/Olss.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/datatables/jquery.dataTables.min.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/bootbox/bootbox.min.js")"></script>
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $('.datepicker-input').datepicker({
            format: 'mm/dd/yyyy',
            minViewMode: 0,
            startView: 0,
            endDate: '12/31/9999',
            startDate: '01/01/1753'
        });
        var getProductDetailsUrl = '@Url.Action("GetProductDetails", "OPLQuotation")';
        var getCustomerDetailsUrl = '@Url.Action("GetCustomerDetails", "OPLQuotation")';
        $('#OPLQuotationDate').datepicker().on('changeDate', function () {
            GetValidityMonth();
        });
        $('#Validuntil').datepicker().on('changeDate', function () {
            GetValidityMonth();
        });

        function GetValidityMonth() {

            var date1 = new Date($('#OPLQuotationDate').datepicker().val());
            var date2 = new Date($('#Validuntil').datepicker().val());
            if (date2 < date1) {
                //  var a = $('#LeaseCategory').parsley();
                // window.ParsleyUI.addError(a, "myCustomError", 'End Period Plan Should  Bigger than Start Period');
                $('span[data-valmsg-for=Validuntil]').html("Validity date should be bigger than Quotation Date ");
                $('span[data-valmsg-for=Validuntil]').addClass("text-danger").addClass("text-sm").show();
                $('#Validuntil').val('');
            }
            else {
                $('span[data-valmsg-for=Validuntil]').hide();
                // window.ParsleyUI.removeError($('#LeaseCategory').parsley(), "myCustomError");
            }

        }
        var OPLQuotationHub = $.connection.OPLQuotation;
        var confirm = false;
        OPLQuotationHub.client.OnSaveLock = function (id) {
            if (id == '@Model.IdOPLQuotation' && !confirm) {
                confirm = true;
                bootbox.confirm("Data has been changes by other user, do you want to refresh the page?", function (result) {
                    if (result != false) {
                        location.reload();
                    }
                    confirm = false;
                });
            }
        };

        OPLQuotationHub.client.OnStatusLock = function (id) {
            if (id == '@Model.IdOPLQuotation' && !confirm) {
                confirm = true;
                bootbox.alert("Status has been changes by other user, you will be redirected to list page ..", function () {
                    window.location.href = '@Url.Action("Index", "OPLQuotation")';
                });
            }
        };

        OPLQuotationHub.client.OnStatusValidateLock = function (id) {
            if (id == '@Model.IdOPLQuotation' && !confirm) {
                confirm = true;
                bootbox.alert("Status has been validate by other user, you will be redirected to list page ..", function () {
                    window.location.href = '@Url.Action("Index", "OPLQuotation")';
                });
            }
        };

        OPLQuotationHub.client.OnStatusInvalidateLock = function (id) {
            if (id == '@Model.IdOPLQuotation' && !confirm) {
                confirm = true;
                bootbox.alert("Status has been validate by other user, you will be redirected to list page ..", function () {
                    window.location.href = '@Url.Action("Index", "OPLQuotation")';
                });
            }
        };
        $.connection.hub.start().done(function () {
            var myClientId = $.connection.hub.id;
            $('#ConnId').val(myClientId);
        });

        function LoadContract() {

            var oTable = null;
            // datatable
            $('#contract-list').each(function () {
                oTable = $(this).dataTable({
                    "bServerSide": true,
                    "bProcessing": true,
                    "aaSorting": [[0, "desc"]],
                    "bRetrieve": true,
                    "sAjaxSource": "@Url.Action("OPLCalculationList", "OPLQuotation")",
                    "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
                    "sPaginationType": "full_numbers",
                    "aoColumns": [
                        { "mData": "OPLCalculationNumber" },
                        { "mData": "LeaseCategory" },
                        { "mData": "BrandName" },
                        { "mData": "TotalUnitQuantityLease" },
                        { "mData": "MaintenanceType" },
                        { "mData": "MonthlyInstallmentAmount" },
                        {
                            "mData": "StartPeriodPlan",
                            "bVisible": false,
                        },
                        {
                            "mData": "EndPeriodPlan",
                            "bVisible": false,
                        },
                        {
                            "mData": "LeasePeriodPlan",
                            "bVisible": false,
                        },
                        {
                            "mData": "ProductCode",
                            "bVisible": false,
                        },
                        {
                            "mData": "CustomerCode",
                            "bVisible": false,
                        },
                        {
                            "mData": "OPLProposalNumber",
                            "bVisible": false,
                        },
                        {
                            "mData": "Remarks",
                            "bVisible": false,
                        }
                    ],
                    "iDisplayLength": 5,
                    "bLengthChange": false
                });
            });
            $("#contract-list").delegate("tr", "click", function () {

                var data = oTable.fnGetData(this);

                if (data.Remarks == "6") {
                    $("#OPLCalculationNumber").val(data.OPLCalculationNumber);
                    $("#StartPeriodPlan").val(function () {
                        if (data.StartPeriodPlan != null) {
                            var date = new Date(parseInt(data.StartPeriodPlan.substr(6)));
                            var modeldate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
                            return modeldate;
                        }
                    });
                    $("#EndPeriodPlan").val(function () {
                        if (data.EndPeriodPlan != null) {
                            var date = new Date(parseInt(data.EndPeriodPlan.substr(6)));
                            var modeldate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
                            return modeldate;
                        }
                    });
                    $("#LeasePeriodPlan").val(data.LeasePeriodPlan);
                    //$("#ProductCode").val(data.ProductCode);
                    //$("#CustomerCode").val(data.CustomerCode);
                    $("#OPLProposalNumber").val(data.OPLProposalNumber);
                    $('#MonthlyRents').val(data.MonthlyInstallmentAmount);
                    $.ajax({
                        url: getCustomerDetailsUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: JSON.stringify({
                            "customerCode": data.CustomerCode,
                        }),
                        contentType: 'application/json;charset=utf-8',
                        success: function (customer) {
                            $("#CustomerCode").val(customer.CustomerCode);
                            $("#CustomerName").val(customer.CustomerName);
                        }

                    });

                    $.ajax({
                        url: getProductDetailsUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: JSON.stringify({
                            "productCode": data.ProductCode,
                        }),
                        contentType: 'application/json;charset=utf-8',
                        success: function (product) {

                            $("#ProductCode").val(product.ProductCode);
                            $("#ProductBrandCode").val(product.BrandCode);
                            $("#ModelName").val(product.ModelName);
                            $("#Transmission").val(product.Transmission);
                            $("#ProductType").val(product.ProductType);
                            $("#BrandName").val(product.BrandName);
                            $("#ModelType").val(product.ModelType);
                            $("#FuelType").val(product.FuelType);
                            $("#ProductCategoryName").val(product.ProductCategory);
                            $("#ModelCode").val(product.ModelCode);
                            $("#ModelYear").val(product.ModelYear);
                            $("#Displacement").val(product.Displacement);
                        }

                    });
                }
                else {
                    bootbox.alert("Please finish Calculation no. " + data.OPLCalculationNumber + " until final step to create the quotation..", function () {

                    });
                }
                $('#contractModal').modal('hide');

            });
        };
        function LoadAdditionalItem() {

            var oTable = null;
            // datatable
            $('#additional-list').each(function () {
                oTable = $(this).dataTable({
                    "bServerSide": true,
                    "bProcessing": true,
                    "bRetrieve": true,
                    "aaSorting": [[0, "desc"]],
                    "bInfo": false,
                    "bFilter": false,
                    "sAjaxSource": "@Url.Action("AdditionalInfoList", "OPLQuotation")",
                    "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
                    "sPaginationType": "full_numbers",
                    "aoColumns": [
                        {
                            "mData": "ItemValuesName",
                            "bSearchable": false,
                            "bSortable": false,
                        },
                        {
                            "mData": "Remarks",
                            "bSearchable": false,
                            "bSortable": false,
                        },
                    ],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "info": false
                });
            });
            $("#additional-list").delegate("tr", "click", function() {

                var data = oTable.fnGetData(this);
                var match = false;
                var datainput = $("#AdditionalItems").val().split(",");
                var i;

                for (i = 0; i < datainput.length; i++) {
                    var value = datainput[i];
                    if (value == data.ItemValuesName) {
                        if (i == 0) {
                            data = data.ItemValuesName;
                        } else {
                            data = "," + data.ItemValuesName;
                        }
                        if (data == ",Others" || data == "Others") {
                            $("#AddEtc").val("");
                            $("#AddEtc").prop("readonly", true);
                        }
                        var regex = new RegExp(data, "i");
                        var newValue = $("#AdditionalItems").val();
                        $("#AdditionalItems").val(newValue.replace(regex, ""));
                        $('#additionaModal').modal('hide');
                        $("#additional-list").undelegate("tr", "click");
                        match = true;
                        break;
                    }
                }
                if (!match) {
                    if ($("#AdditionalItems").val() != '') {
                        $("#AdditionalItems").val($("#AdditionalItems").val() + ',' + data.ItemValuesName);
                    } else {
                        $("#AdditionalItems").val(data.ItemValuesName);
                    }
                    if (data.ItemValuesName == ",Others" || data.ItemValuesName == "Others") {
                        $("#AddEtc").prop("readonly", false);
                    }
                    match = false;
                    $('#additionaModal').modal('hide');
                    $("#additional-list").undelegate("tr", "click");
                }

            });

        };
        $(document).ready(function () {
            $(".currenciesOnly").on('keydown', currenciesOnly)
                .on('blur', function () { $(this).formatCurrency(); });
            $(".numbersOnly").on('keydown', numbersOnly);

            var datainput = $("#AdditionalItems").val().split(",");
            var i;

            for (i = 0; i < datainput.length; i++) {
                var value = datainput[i];
                if (value == ",Others" || value == "Others") {
                    $("#AddEtc").prop("readonly", false);
                }
            }
        });
    </script>

    <script src="@Url.Content("~/Content/ui-framework/js/currencyformat/jquery.formatCurrency-1.4.0.js")"></script>
}