@model Dsf.Olss.Models.OPLCalculationViewModel
@using System.Web.UI.WebControls;

@section Styles{
    <link rel="stylesheet" href=@Url.Content("~/Content/ui-framework/js/datatables/datatables.css") type="text/css" />
}
@{
    var remark = System.Convert.ToInt32(Model.OPLRemarks);
    var state = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = "Calculation of Operating Lease - Step 1";
    var success = ViewBag.Success ?? TempData["Success"];
}
@Message.Display(success, ViewBag.Error)
<a href="@Url.Action("Index")" class="btn btn-white"><i class="fa fa-chevron-left"></i> Back</a>


@if (Model.IsDraft)
{
    <label class="label label-default label-lg pull-right">draft</label>
}
else if (Model.IsSubmitted)
{
    <label class="label label-info label-lg pull-right">submitted</label>
}
else if (Model.IsValid)
{
    <label class="label label-success label-lg pull-right">valid</label>
}
else if (Model.CreateDate != null)
{
    <label class="label label-default label-lg bg-light pull-right">invalid</label>
}
<hr />

<section class="tab-pane" id="wizard">
    <div class="panel">
        @Html.WizardNav(6, 1, remark, x => @Url.RouteUrl("OPLCalculation", new { Controller = "OPLCalculation", Action = "Edit", step = x, id = @Model.IdOPLCalculation }))
    </div>
</section>
@if (!state.Equals("Create"))
{
    <div class="panel label-panel">
        <div class="row" style="padding-bottom:5px; padding-top:5px;">
            <div class="col-xs-6 col-sm-3">
                <div class="font-bold" style="padding-left:15px; float:left;"><i class="fa fa-user text-danger"></i> Created by</div><div style="float:left; padding-left:15px;">@Html.DisplayFor(o => o.CreateBy)</div>
            </div>
            <div class="col-xs-6 col-sm-3">
                <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-calendar text-danger"></i> Created Date</div><div style="float: left; padding-left: 15px;">@Html.DisplayFor(o => o.CreateDate)</div>
            </div>
            <div class="col-xs-6 col-sm-3">
                <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-user text-danger"></i> Last Modified By</div><div style="float: left; padding-left: 15px;">@Html.DisplayFor(o => o.LastModifiedBy)</div>
            </div>
            <div class="col-xs-6 col-sm-3">
                <div class="font-bold" style="padding-left: 15px; float: left;"><i class="fa fa-calendar text-danger"></i> Last  Modified Date</div><div style="float: left; padding-left: 15px;">@Html.DisplayFor(o => o.LastModified)</div>
            </div>
        </div>
    </div>
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { @data_validate = "parsley" }))
{
    @Html.HiddenFor(o => o.ConnId)
    @Html.HiddenFor(o => o.IdOPLCalculation)
    @Html.HiddenFor(o => o.OPLRemarks)
    <section class="panel">
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>OPL Calculation Number</label>
                        @Html.TextBoxFor(o => o.OPLCalculationNumber, null, new { @class = "form-control", @placeholder = "OPL Calculation Number", @readonly = "true" })
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="panel">
        <header class="panel-heading font-bold">Basic Information (Product)</header>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Product Registration Code</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.ProductCode, null, new { @class = "form-control", @placeholder = "Product Registration Code", @data_required = "true", @parsley_error_container = "input-group", @readonly = "true" })
                            <span class="input-group-btn">
                                <button class="btn btn-white" data-toggle="modal" data-target="#productModal" type="button" onclick="LoadProduct()" tabindex="1">...</button>
                            </span>
                        </div><!-- /input-group -->
                        @Html.ValidationMessageFor(o => o.ProductCode)
                    </div>
                    <div class="form-group">
                        <label>Product Brand Code</label>
                        @Html.TextBoxFor(o => o.ProductBrandCode, null, new { @class = "form-control", @placeholder = "Product Brand Code", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Product Model Name</label>
                        @Html.TextBoxFor(o => o.ModelName, null, new { @class = "form-control", @placeholder = "Product Model Name", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Transmission</label>
                        @Html.TextBoxFor(o => o.Transmission, null, new { @class = "form-control", @placeholder = "Transmission", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Usage</label>
                        @Html.DropDownListFor(o => o.Usage, (List<SelectListItem>)ViewBag.ProductUsage, new { @class = "form-control", @tabindex = "2" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Product Type</label>
                        @Html.TextBoxFor(o => o.ProductType, null, new { @class = "form-control", @placeholder = "Product Type", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Product Brand Name</label>
                        @Html.TextBoxFor(o => o.BrandName, null, new { @class = "form-control", @placeholder = "Product Brand Name", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Product Model Type</label>
                        @Html.TextBoxFor(o => o.ModelType, null, new { @class = "form-control", @placeholder = "Product Model Type", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Fuel Type</label>
                        @Html.TextBoxFor(o => o.FuelType, null, new { @class = "form-control", @placeholder = "Fuel Type", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Number Plate Color</label>
                        @Html.DropDownListFor(o => o.NumberPlatColor, ViewBag.NumberPlatColor as SelectList, new { @class = "form-control", @tabindex = "3" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Product Category</label>
                        @Html.TextBoxFor(o => o.ProductCategoryName, null, new { @class = "form-control", @placeholder = "Product Category", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Product Model Code</label>
                        @Html.TextBoxFor(o => o.ModelCode, null, new { @class = "form-control", @placeholder = "Product Model Code", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Product Model Year (yyyy/mm)</label>
                        @Html.TextBoxFor(o => o.ModelYear, "{0:yyyy/MM}", new { @class = "form-control", @placeholder = "Product Model Year (yyyy/mm)", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Displacement (CC)</label>
                        @Html.TextBoxFor(o => o.Displacement, null, new { @class = "form-control", @placeholder = "Displacement", @readonly = "true" })
                    </div>
                    <div class="form-group">
                        <label>Monthly Mileage (Km)</label>
                        @Html.TextBoxFor(o => o.MonthlyMileage, null, new { @class = "form-control numbersOnly", @placeholder = "Monthly Mileage", @tabindex = "4" })
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Input Basic Information -->
    <section class="panel">
        <header class="panel-heading font-bold">Basic Information (Lease)</header>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Customer Name</label>
                        <div class="input-group">
                            @Html.HiddenFor(o => o.CustomerCode)
                            @Html.TextBoxFor(o => o.CustomerName, null, new { @class = "form-control", @placeholder = "Customer Name", @data_required = "true", @parsley_error_container = ".input-group", @readonly = "true" })
                            <span class="input-group-btn">
                                <button class="btn btn-white" data-toggle="modal" data-target="#customerModal" type="button" onclick="LoadCustomer()" tabindex="5">...</button>
                            </span>
                        </div><!-- /input-group -->
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Lease Category</label>
                        @Html.DropDownListFor(o => o.LeaseCategory, ViewBag.LeaseCategory as SelectList, new { @class = "form-control", @tabindex = "6" })
                    </div>
                    <div class="form-group">
                        <label>Start Date Usage Unit Plan (mm/dd/yyyy)</label>
                        <div class="input-group">
                            @Html.TextBoxFor(o => o.StartPeriodPlan, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker-input", @placeholder = "Start Date Usage Unit Plan (mm/dd/yyyy)", data_date_format = "mm/dd/yyyy", @tabindex = "8" })
                            <span class="input-group-addon">
                                <span class="fa fa-calendar"></span>
                            </span>
                            
                        </div>
                        @Html.ValidationMessageFor(o => o.StartPeriodPlan)
                    </div>
                    <div class="form-group">
                        <label>Maintenance Type</label>
                        @Html.DropDownListFor(o => o.MaintenanceType, (List<SelectListItem>)ViewBag.MaintenanceType, new { @class = "form-control", @tabindex = "11" })
                    </div>
                    <div class="form-group">
                        <label>Carroserie Type</label>
                        @Html.TextBoxFor(o => o.CarroserrieType, null, new { @class = "form-control", @placeholder = "Carroserrie Type", @data_maxlength = "200", @tabindex = "14" })
                    </div>
                    <div class="form-group">
                        <label>Accessories Type</label>
                        @Html.TextBoxFor(o => o.AccessoriesType, null, new { @class = "form-control", @placeholder = "Accessories Type", @data_maxlength = "200", @tabindex = "16" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Previous Agreement Number</label>
                        @Html.TextBoxFor(o => o.ContractNumberReff, null, new { @class = "form-control", @placeholder = "Previous Agreement Number", @readonly = "readonly", @tabindex = "7" })
                    </div>
                   
                    <div class="form-group">
                        <label>Lease Period Plan (Months)</label>
                        @Html.TextBoxFor(o => o.LeasePeriodPlan, null, new { @class = "form-control numbersOnly", @placeholder = "Lease Period Plan (Months)", @data_required = "true", @tabindex = "9" })
                    </div>

                    <div class="form-group">
                        <label>Insurance</label>
                        @{
    var insurancelistItems = new List<ListItem>
                                {
                                      new ListItem { Text = "Yes", Value = "true" },
                                      new ListItem { Text = "No", Value = "false" }
                                };
                        }
                        @Html.DropDownListFor(o => o.Insurance, new SelectList(insurancelistItems, "Value", "Text"), new { @class = "form-control", @tabindex = "12" })
                    </div>
                    <div class="form-group">
                        <label>Carroserie</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.Carroserrie, "{0:N0}", new { @class = "form-control currenciesOnly", @placeholder = "Carroserrie", @data_maxlength = "23", @tabindex = "15" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Accessories</label>
                        <div class="input-group">
                            <span class="input-group-addon">Rp</span>
                            @Html.TextBoxFor(o => o.Accessories, "{0:N0}", new { @class = "form-control currenciesOnly", @placeholder = "Accessories", @data_maxlength = "23", @tabindex = "17" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">
                    <div class="form-group">
                        <label>Term of Payment (Days)</label>
                        @Html.TextBoxFor(o => o.TermPaymentDays, null, new { @class = "form-control numbersOnly", @placeholder = "Term of Payments" })
                    </div>
                    <div class="form-group">
                        <label>End Date Usage Unit Plan (mm/dd/yyyy)</label>
                        @Html.TextBoxFor(o => o.EndPeriodPlan, "{0:MM/dd/yyyy}", new { @class = "form-control", @placeholder = "End Date Usage Unit Plan (mm/dd/yyyy)", @data_required = "true", @readonly = "true", @tabindex = "10" })
                        @Html.ValidationMessageFor(o => o.EndPeriodPlan)
                    </div>
                    <div class="form-group">
                        <label>Purchase Requirement After Lease</label>
                        @{
    var afterleaselistItems = new List<ListItem>
                                {
                                      new ListItem { Text = "Yes", Value = "true" },
                                      new ListItem { Text = "No", Value = "false" }
                                };
                        }
                        @Html.DropDownListFor(o => o.PurchaseAfterLease, new SelectList(afterleaselistItems, "Value", "Text"), new { @class = "form-control", @tabindex = "13" })
                    </div>
                    <div class="form-group">
                        <label style="visibility:hidden">This is a hidden field</label>
                        <input class="form-control" disabled="disabled" style="visibility:hidden" type="text">
                    </div>
                    <div class="form-group">
                        <label style="visibility:hidden">This is a hidden field</label>
                        <input class="form-control" disabled="disabled" style="visibility:hidden" type="text">
                    </div>
                </div>
            </div>
        </div>
        <div class="panel-footer bg-light lter">
            @if (state.Equals("Create"))
            {
                <input type="submit" class="btn btn-info" value="Save as Draft" name="action" />
            }
            else
            {
                if (Session["Role"].ToString() == Dsf.Lib.Constant.OlssRole.SuperUser || Session["Role"].ToString() == Dsf.Lib.Constant.OlssRole.Admin)
                {
                    if (Model.IsDraft)
                    {
                        <input type="submit" class="btn btn-info" value="Save Changes" name="step_1" />
                    }
                    else if (Model.IsSubmitted)
                    {
                        <input type="submit" class="btn btn-info" value="Save Changes" name="step_1" />
                    }
                }
                if (Session["Role"].ToString() == Dsf.Lib.Constant.OlssRole.User)
                {
                    if (Model.IsDraft)
                    {

                        <input type="submit" class="btn btn-info" value="Save Changes" name="step_1" />
                    }
                }
                @Html.HiddenFor(o => o.IsValid)
                @Html.HiddenFor(o => o.IsSubmitted)
                @Html.HiddenFor(o => o.IsDraft)
                <a href="@Url.RouteUrl("OPLCalculation", new { Controller = "OPLCalculation", Action = "Edit", step = "2", id = @Model.IdOPLCalculation })" type="submit" class="btn btn-primary">Next Step <i class="fa fa-chevron-right"></i></a>
            }

        </div>
    </section>

}
@*</section>*@
@{Html.RenderPartial("ModalPopUp");}

@section Scripts{
    <script src="@Url.Content("~/Scripts/jsDate.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/parsley/parsley.min.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/datepicker/bootstrap-datepicker.js")"></script>
    <script src="@Url.Content("~/Content/js/Olss.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/datatables/jquery.dataTables.min.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/bootbox/bootbox.min.js")"></script>
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        var OPLCalculationHub = $.connection.OPLCalculation;
        $footer = $('.panel-footer');
        $button = $footer.find("[type='submit']");
        var confirm = false;
        OPLCalculationHub.client.OnSaveLock = function (id, remarks) {
            if (id == '@Model.IdOPLCalculation' && remarks == '@Model.OPLRemarks' && !confirm) {
                confirm = true;
                bootbox.confirm("Data has been changes by other user, do you want to refresh the page?", function (result) {
                    if (result != false) {
                        location.href = location.href;
                    }
                    confirm = false;
                });
            }
        };

        OPLCalculationHub.client.OnStatusLock = function (id) {
            if (id == '@Model.IdOPLCalculation' && !confirm) {
                confirm = true;
                bootbox.alert("Status has been changes by other user, you will be redirected to list page ..", function () {
                    window.location.href = '@Url.Action("Index", "OPLCalculation")';
                });
            }
        };

        $.connection.hub.start().done(function () {
            var myClientId = $.connection.hub.id;
            $('#ConnId').val(myClientId);
        });

        $('.datepicker-input').datepicker({
            format: 'mm/dd/yyyy',
            minViewMode: 0,
            startView: 0,
            endDate: '12/31/9999',
            startDate: '01/01/1753',
        });
        $('#StartPeriodPlan').datepicker().on('changeDate', function () {
            var firstpaymentduedate = GetEndPeriod();
            GetValidityMonth();
            GetValidityDate(firstpaymentduedate);
        });
        $('#LeasePeriodPlan').change(function () {
            var firstpaymentduedate = GetEndPeriod();
            GetValidityMonth();
            GetValidityDate(firstpaymentduedate);
        });
        $('#TermPaymentDays').change(function () {
            var firstpaymentduedate = GetEndPeriod();
            GetValidityMonth();
            GetValidityDate(firstpaymentduedate);
        });

        function GetEndPeriod() {

            var DaysUsageUnit = 30;
            var FirstStartDate = new Date($('#StartPeriodPlan').datepicker().val());
            var LeasePeriod = $('#LeasePeriodPlan').val();
            if (LeasePeriod <= 0) {
                return;
            }
            if (FirstStartDate == null) {
                return;
            }
            var FirstEndDate = FirstStartDate;
            FirstEndDate.setDate(FirstEndDate.getDate() + DaysUsageUnit);
            var d1 = FirstEndDate.getDate();
            var m1 = FirstEndDate.getMonth() + 1;
            var y1 = FirstEndDate.getFullYear();
            var FormattedDate1 = ("0" + m1).slice(-2) + '/' + ("0" + d1).slice(-2) + '/' + y1;

            var TOP = Number($('#TermPaymentDays').val());
            var FirstDueDate = FirstEndDate;
            FirstDueDate.setDate(FirstDueDate.getDate() + TOP);
            var d2 = FirstDueDate.getDate();
            var m2 = FirstDueDate.getMonth() + 1;
            var y2 = FirstDueDate.getFullYear();
            var FormattedDate2 = ("0" + m2).slice(-2) + '/' + ("0" + d2).slice(-2) + '/' + y2;

            var LastDueDate = FirstDueDate;
            LastDueDate.setMonth(LastDueDate.getMonth() + (LeasePeriod - 1));
            var d3 = LastDueDate.getDate();
            var m3 = LastDueDate.getMonth() + 1;
            var y3 = LastDueDate.getFullYear();
            var FormattedDate3 = ("0" + m3).slice(-2) + '/' + ("0" + d3).slice(-2) + '/' + y3;

            var LastEndDate = LastDueDate;
            LastEndDate.setDate(LastEndDate.getDate() - TOP);
            var d4 = LastEndDate.getDate();
            var m4 = LastEndDate.getMonth() + 1;
            var y4 = LastEndDate.getFullYear();
            var FormattedDate4 = ("0" + m4).slice(-2) + '/' + ("0" + d4).slice(-2) + '/' + y4;
            $("#EndPeriodPlan").val(FormattedDate4);
            return FormattedDate2;
        }
 
        function GetValidityMonth() {

            var date1 = new Date($('#StartPeriodPlan').datepicker().val());
            var date2 = new Date($('#EndPeriodPlan').val());
            if (date2 < date1) {
                //  var a = $('#LeaseCategory').parsley();
                // window.ParsleyUI.addError(a, "myCustomError", 'End Period Plan Should not Bigger than Start Period');
                $('span[data-valmsg-for=EndPeriodPlan]').html("End Period Plan Should be Bigger than Start Period");
                $('span[data-valmsg-for=EndPeriodPlan]').addClass("text-danger").addClass("text-sm").show();
                $('#LeasePeriodPlan').val('');
            }
            else {
                $('span[data-valmsg-for=EndPeriodPlan]').hide();
                // window.ParsleyUI.removeError($('#LeaseCategory').parsley(), "myCustomError");
            }

        }

        function GetValidityDate(date) {
            if (date == null)
                return;
            var duedate = new Date(date);
            if (duedate.getDate() > 28) {
                $('span[data-valmsg-for=StartPeriodPlan]').html("The payment due date cannot be on 29th,30th, or 31st. please change the start date");
                $('span[data-valmsg-for=StartPeriodPlan]').addClass("text-danger").addClass("text-sm").show();
                $('#StartPeriodPlan').val('');
            }
            else {
                $('span[data-valmsg-for=StartPeriodPlan]').hide();
                // window.ParsleyUI.removeError($('#LeaseCategory').parsley(), "myCustomError");
            }
        }

        function LoadProduct() {

            // datatable
            var oTable = null;
            $('#product-list').each(function () {
                oTable = $(this).dataTable({
                    "bServerSide": true,
                    "bProcessing": true,
                    "bRetrieve": true,
                    "aaSorting": [[0, "desc"]],
                    "sAjaxSource": "@Url.Action("ProductDatatable", "OPLCalculation")",
                    "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
                    "sPaginationType": "full_numbers",
                    "aoColumns": [
                         { "mData": "ProductCode" },
                         { "mData": "ProductCategory1" },
                         { "mData": "BrandName" },
                         { "mData": "ModelName" },
                         {
                             "mData": "ModelYear",
                             //"fnRender": function (aObj) {
                             //    var date = new Date(parseInt(aObj.aData["ModelYear"].substr(6)));
                             //    var modeldate = date.getFullYear() + "/" + date.getMonth();
                             //    return modeldate;
                             //}
                         },
                         {
                             "mData": "ModelCode",
                             "bVisible": false,
                         },
                         {
                             "mData": "BrandCode",
                             "bVisible": false,
                         },
                         {
                             "mData": "Transmission",
                             "bVisible": false,
                         },
                         {
                             "mData": "ProductType1",
                             "bVisible": false,
                         },
                         {
                             "mData": "DisPlacement",
                             "bVisible": false,
                         },
                         {
                             "mData": "FuelType",
                             "bVisible": false,
                         },
                         {
                             "mData": "ModelType",
                             "bVisible": false,
                         },
                    ],
                    "iDisplayLength": 5,
                    "bLengthChange": false
                });
            });
            $("#product-list tbody").delegate("tr", "click", function () {

                var data = oTable.fnGetData(this);

                $("#ProductCode").val(data.ProductCode);
                $("#ProductType").val(data.ProductType1);
                $("#ProductCategoryName").val(data.ProductCategory1);
                $("#ProductBrandCode").val(data.BrandCode);
                $("#BrandName").val(data.BrandName);
                $("#ModelCode").val(data.ModelCode);
                $("#ModelName").val(data.ModelName);
                $("#ModelType").val(data.ModelType);
                $("#ModelYear").val(data.ModelYear);
                $("#Transmission").val(data.Transmission);
                $("#FuelType").val(data.FuelType);
                $("#Displacement").val(data.DisPlacement);


                $('#productModal').modal('hide');
                $("#product-list tbody").undelegate("tr", "click");
            });
        };
        function LoadCustomer() {

            // datatable
            var oTable = null;
            $('#customer-list').each(function () {
                oTable = $(this).dataTable({
                    "bServerSide": true,
                    "bProcessing": true,
                    "aaSorting": [[0, "desc"]],
                    "bRetrieve": true,
                    "sAjaxSource": "@Url.Action("CustomerDatatable", "OPLCalculation")",
                    "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
                    "sPaginationType": "full_numbers",
                    "aoColumns": [
                         { "mData": "CustomerCode" },
                         { "mData": "CustomerName" },
                         { "mData": "Address" },
                         { "mData": "Telephone" },
                    ],
                    "iDisplayLength": 5,
                    "bLengthChange": false
                });
            });
            $("#customer-list tbody").delegate("tr", "click", function () {

                var data = oTable.fnGetData(this);

                $("#CustomerCode").val(data.CustomerCode);
                $("#CustomerName").val(data.CustomerName);

                $('#customerModal').modal('hide');
                $("#customer-list tbody").undelegate("tr", "click");
            });
        };

        $(document).ready(function () {
            $(".currenciesOnly").on('keydown', currenciesOnly)
                                      .on('blur', function () { $(this).formatCurrency(); });
            $(".numbersOnly").on('keydown', numbersOnly);
            $("select#LeaseCategory").change(function () {
                if ($('option:selected', $(this)).text() == "Refinance") {
                    $("#ContractNumberReff").prop("readonly", false);
                }
                else {
                    $("#ContractNumberReff").prop("readonly", true);
                }
            });

            for (i = 0 ; i < $button.length; i++) {
                $button[i].tabIndex = 18 + i;
            }
        });
    </script>

    <script src="@Url.Content("~/Content/ui-framework/js/currencyformat/jquery.formatCurrency-1.4.0.js")"></script>
}
