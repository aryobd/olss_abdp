@using System.Web.UI.WebControls
@using Dsf.Lib.Constant
@model Dsf.Olss.Models.BILScheduleDetailViewModel

@{
    ViewBag.Title = "Edit Billing & Payment History Inquiry";
}
@section Styles{
    <link rel="stylesheet" href=@Url.Content("~/Content/ui-framework/js/datatables/datatables.css") type="text/css" />
    <link rel="stylesheet" href=@Url.Content("~/Content/css/style.css") type="text/css" />
}
@if (ViewBag.rID == 0)
{
    <a href="@Url.Action(ViewBag.rMethod, ViewBag.rController)" class="btn btn-white"><i class="fa fa-chevron-left"></i> Back</a><br><br>
}
else
{
    <a href="@Url.Action(ViewBag.rMethod, ViewBag.rController, new { id = ViewBag.rID })" class="btn btn-white"><i class="fa fa-chevron-left"></i> Back</a><br><br>
}

@Message.Display(ViewBag.Success, ViewBag.Error)

<div class="panel label-panel">
    <table class="table">
        <tr>
            <td class="font-bold"><i class="fa fa-user text-danger"></i> Created by</td>
            <td>
                @Html.HiddenFor(o => o.CreatedBy)
                @(Model.CreatedBy)
            </td>
            <td class="font-bold"><i class="fa fa-calendar text-danger"></i> Created Date</td>
            <td>
                @Html.HiddenFor(o => o.CreatedDate)
                @(String.Format("{0:MM/dd/yyyy}", Model.CreatedDate))
            </td>
            <td class="font-bold"><i class="fa fa-user text-danger"></i> Last Modified By</td>
            <td>
                @Html.HiddenFor(o => o.LastModifiedBy)
                @(Model.LastModifiedBy)
            </td>
            <td class="font-bold"><i class="fa fa-calendar text-danger"></i> Last  Modified Date</td>
            <td>
                @Html.HiddenFor(o => o.LastModifiedDate)
                @(String.Format("{0:MM/dd/yyyy}", Model.LastModifiedDate))
            </td>
        </tr>
    </table>
</div>

@using (Html.BeginForm("EditBilling", "BILCreation", new { rController = ViewBag.rController, rID = ViewBag.rID }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <!-- Contract Information -->
    <section class="panel">
        <header class="panel-heading">Contract Information</header>
        <div class="panel-body">
            <div class="row">
                <!-- Agreement Number -->
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.AgreementNumber)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.AgreementNumber, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.PreviousAgreementNumber)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.PreviousAgreementNumber, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <!-- Agreement Date -->
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.AgreementDate)</div>
                        <div class="col-lg-6">
                            <div class="input-group date inmod">
                                @Html.TextBoxFor(x => x.AgreementDate, new { @class = "form-control datepicker", @style = "margin-top: 0px; padding: 6px 12px;", @readonly = "readonly" })
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

          <!-- Billing and Payment History -->
    <section class="panel">
        <header class="panel-heading">Billing and Payment History</header>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.SalesPICName)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.SalesPICName, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.SalesPICPosition)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.SalesPICPosition, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.SalesPICPhone)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.SalesPICPhone, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.SalesPICEmail)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.SalesPICEmail, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.CustomerName)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ProductBrandName)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.ProductBrandName, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ProductModelName)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.ProductModelName, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ModelYear)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.ModelYear, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.LeaseCategory)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.LeaseCategory, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.MaintenanceType)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.MaintenanceType, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.Insurance)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.Insurance, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.PurchaseRequired)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.PurchaseRequired, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Contract Start Date -->
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ContractStartDate)</div>
                        <div class="col-lg-6">
                            <div class="input-group date inmod">
                                @Html.TextBoxFor(x => x.ContractStartDate, new { @class = "form-control datepicker", @style = "margin-top: 0px; padding: 6px 12px;", @readonly = "readonly" })
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Contract Start Date -->
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ContractExpiredDate)</div>
                        <div class="col-lg-6">
                            <div class="input-group date inmod">
                                @Html.TextBoxFor(x => x.ContractExpiredDate, new { @class = "form-control datepicker", @style = "margin-top: 0px; padding: 6px 12px;", @readonly = "readonly" })
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.LeasePeriod)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.LeasePeriod, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.Usage)</div>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(x => x.Usage, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ExpectationCollectionAmount)</div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <span class="input-group-addon">Rp</span>
                                @Html.TextBoxFor(x => x.ExpectationCollectionAmount, "{0:n0}", new { @class = "form-control text-right", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.CollectionAmount)</div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <span class="input-group-addon">Rp</span>
                                @Html.TextBoxFor(x => x.CollectionAmount, "{0:n0}", new { @class = "form-control text-right", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.OverdueAmount)</div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <span class="input-group-addon">Rp</span>
                                @Html.TextBoxFor(x => x.OverdueAmount, "{0:n0}", new { @class = "form-control text-right", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.ApprovalAdjustmentMemo)</div>
                        <div class="col-lg-6">
                            <table style="width:100%;">
                                <tr>
                                    <td style="padding-right: 10px; width: 16px;">@Html.CheckBoxFor(x => x.ApprovalAdjustmentMemo, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })</td>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-addon">Rp</span>
                                            @Html.TextBoxFor(x => x.AdjustmentBreakdownAmount, "{0:n0}", new { @class = "form-control text-right money", @readonly = "readonly" })
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            @Html.ValidationMessageFor(x => x.AdjustmentBreakdownAmount)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.IncludePPh)</div>
                        <div class="col-lg-6">
                            @{
    List<SelectListItem> items = new List<SelectListItem>();
    items.Add(new SelectListItem { Text = "Yes", Value = "true", Selected = true });
    items.Add(new SelectListItem { Text = "No", Value = "false" });
                            }
                            @Html.DropDownListFor(x => x.IncludePPh, items, new { @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.BillingTotal)</div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <span class="input-group-addon">Rp</span>
                                @Html.TextBoxFor(x => x.BillingTotal, "{0:n0}", new { @class = "form-control text-right", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-lg-6">
                    <div class="form-group">
                        <div class="col-lg-6">@Html.LabelFor(x => x.SpecialInvoice)</div>
                        <div class="col-lg-6">
                            <table style="width:100%;">
                                <tr>
                                    <td style="padding-right: 10px; width: 16px;">@Html.CheckBoxFor(x => x.SpecialInvoice, new { @class = "form-control", @style = "width: 16px; height: 16px; margin: 0px;" })</td>
                                    <td>
                                        <div class="input-group date inmod">
                                            @Html.TextBoxFor(x => x.SpecialInvoiceIssueDate, new { @class = "form-control datepicker", @style = "margin-top: 0px; padding: 6px 12px;", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-calendar"></span>
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            @Html.ValidationMessageFor(x => x.SpecialInvoiceIssueDate)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <footer class="panel-footer bg-light lter">
                @Html.HiddenFor(x => x.IdTb_BIL_PayScheduleDtl)
                <input type="hidden" id="submitButtonText" />
                <input type="submit" name="statusButton" class="btn btn-info" value="Save Changes" />
                <input type="submit" name="statusButton" class="btn btn-primary" value="Submit" />
            </footer>
        </div>
    </section>
}

@{Html.RenderPartial("ModalPopUp");}

@section Scripts{
    <script src="@Url.Content("~/Content/js/Olss.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/datatables/jquery.dataTables.min.js")"></script>
    <script src="@Url.Content("~/Content/ui-framework/js/select2/select2.min.js")"></script>
    <script type="text/javascript">
        //BigNumber Calculation
        (function (global) { "use strict"; var DP = 20, RM = 1, MAX_DP = 1e6, MAX_POWER = 1e6, E_NEG = -7, E_POS = 21, P = {}, isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, Big; function bigFactory() { function Big(n) { var x = this; if (!(x instanceof Big)) { return n === void 0 ? bigFactory() : new Big(n) } if (n instanceof Big) { x.s = n.s; x.e = n.e; x.c = n.c.slice() } else { parse(x, n) } x.constructor = Big } Big.prototype = P; Big.DP = DP; Big.RM = RM; Big.E_NEG = E_NEG; Big.E_POS = E_POS; return Big } function format(x, dp, toE) { var Big = x.constructor, i = dp - (x = new Big(x)).e, c = x.c; if (c.length > ++dp) { rnd(x, i, Big.RM) } if (!c[0]) { ++i } else if (toE) { i = dp } else { c = x.c; i = x.e + i + 1 } for (; c.length < i; c.push(0)) { } i = x.e; return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ? (x.s < 0 && c[0] ? "-" : "") + (c.length > 1 ? c[0] + "." + c.join("").slice(1) : c[0]) + (i < 0 ? "e" : "e+") + i : x.toString() } function parse(x, n) { var e, i, nL; if (n === 0 && 1 / n < 0) { n = "-0" } else if (!isValid.test(n += "")) { throwErr(NaN) } x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1; if ((e = n.indexOf(".")) > -1) { n = n.replace(".", "") } if ((i = n.search(/e/i)) > 0) { if (e < 0) { e = i } e += +n.slice(i + 1); n = n.substring(0, i) } else if (e < 0) { e = n.length } for (i = 0; n.charAt(i) == "0"; i++) { } if (i == (nL = n.length)) { x.c = [x.e = 0] } else { for (; n.charAt(--nL) == "0";) { } x.e = e - i - 1; x.c = []; for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) { } } return x } function rnd(x, dp, rm, more) { var u, xc = x.c, i = x.e + dp + 1; if (rm === 1) { more = xc[i] >= 5 } else if (rm === 2) { more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1) } else if (rm === 3) { more = more || xc[i] !== u || i < 0 } else { more = false; if (rm !== 0) { throwErr("!Big.RM!") } } if (i < 1 || !xc[0]) { if (more) { x.e = -dp; x.c = [1] } else { x.c = [x.e = 0] } } else { xc.length = i--; if (more) { for (; ++xc[i] > 9;) { xc[i] = 0; if (!i--) { ++x.e; xc.unshift(1) } } } for (i = xc.length; !xc[--i]; xc.pop()) { } } return x } function throwErr(message) { var err = new Error(message); err.name = "BigError"; throw err } P.abs = function () { var x = new this.constructor(this); x.s = 1; return x }; P.cmp = function (y) { var xNeg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e; if (!xc[0] || !yc[0]) { return !xc[0] ? !yc[0] ? 0 : -j : i } if (i != j) { return i } xNeg = i < 0; if (k != l) { return k > l ^ xNeg ? 1 : -1 } i = -1; j = (k = xc.length) < (l = yc.length) ? k : l; for (; ++i < j;) { if (xc[i] != yc[i]) { return xc[i] > yc[i] ^ xNeg ? 1 : -1 } } return k == l ? 0 : k > l ^ xNeg ? 1 : -1 }; P.div = function (y) { var x = this, Big = x.constructor, dvd = x.c, dvs = (y = new Big(y)).c, s = x.s == y.s ? 1 : -1, dp = Big.DP; if (dp !== ~~dp || dp < 0 || dp > MAX_DP) { throwErr("!Big.DP!") } if (!dvd[0] || !dvs[0]) { if (dvd[0] == dvs[0]) { throwErr(NaN) } if (!dvs[0]) { throwErr(s / 0) } return new Big(s * 0) } var dvsL, dvsT, next, cmp, remI, u, dvsZ = dvs.slice(), dvdI = dvsL = dvs.length, dvdL = dvd.length, rem = dvd.slice(0, dvsL), remL = rem.length, q = y, qc = q.c = [], qi = 0, digits = dp + (q.e = x.e - y.e) + 1; q.s = s; s = digits < 0 ? 0 : digits; dvsZ.unshift(0); for (; remL++ < dvsL; rem.push(0)) { } do { for (next = 0; next < 10; next++) { if (dvsL != (remL = rem.length)) { cmp = dvsL > remL ? 1 : -1 } else { for (remI = -1, cmp = 0; ++remI < dvsL;) { if (dvs[remI] != rem[remI]) { cmp = dvs[remI] > rem[remI] ? 1 : -1; break } } } if (cmp < 0) { for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) { if (rem[--remL] < dvsT[remL]) { remI = remL; for (; remI && !rem[--remI]; rem[remI] = 9) { } --rem[remI]; rem[remL] += 10 } rem[remL] -= dvsT[remL] } for (; !rem[0]; rem.shift()) { } } else { break } } qc[qi++] = cmp ? next : ++next; if (rem[0] && cmp) { rem[remL] = dvd[dvdI] || 0 } else { rem = [dvd[dvdI]] } } while ((dvdI++ < dvdL || rem[0] !== u) && s--); if (!qc[0] && qi != 1) { qc.shift(); q.e-- } if (qi > digits) { rnd(q, dp, Big.RM, rem[0] !== u) } return q }; P.eq = function (y) { return !this.cmp(y) }; P.gt = function (y) { return this.cmp(y) > 0 }; P.gte = function (y) { return this.cmp(y) > -1 }; P.lt = function (y) { return this.cmp(y) < 0 }; P.lte = function (y) { return this.cmp(y) < 1 }; P.sub = P.minus = function (y) { var i, j, t, xLTy, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s; if (a != b) { y.s = -b; return x.plus(y) } var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e; if (!xc[0] || !yc[0]) { return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0) } if (a = xe - ye) { if (xLTy = a < 0) { a = -a; t = xc } else { ye = xe; t = yc } t.reverse(); for (b = a; b--; t.push(0)) { } t.reverse() } else { j = ((xLTy = xc.length < yc.length) ? xc : yc).length; for (a = b = 0; b < j; b++) { if (xc[b] != yc[b]) { xLTy = xc[b] < yc[b]; break } } } if (xLTy) { t = xc; xc = yc; yc = t; y.s = -y.s } if ((b = (j = yc.length) - (i = xc.length)) > 0) { for (; b--; xc[i++] = 0) { } } for (b = i; j > a;) { if (xc[--j] < yc[j]) { for (i = j; i && !xc[--i]; xc[i] = 9) { } --xc[i]; xc[j] += 10 } xc[j] -= yc[j] } for (; xc[--b] === 0; xc.pop()) { } for (; xc[0] === 0;) { xc.shift(); --ye } if (!xc[0]) { y.s = 1; xc = [ye = 0] } y.c = xc; y.e = ye; return y }; P.mod = function (y) { var yGTx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s; if (!y.c[0]) { throwErr(NaN) } x.s = y.s = 1; yGTx = y.cmp(x) == 1; x.s = a; y.s = b; if (yGTx) { return new Big(x) } a = Big.DP; b = Big.RM; Big.DP = Big.RM = 0; x = x.div(y); Big.DP = a; Big.RM = b; return this.minus(x.times(y)) }; P.add = P.plus = function (y) { var t, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s; if (a != b) { y.s = -b; return x.minus(y) } var xe = x.e, xc = x.c, ye = y.e, yc = y.c; if (!xc[0] || !yc[0]) { return yc[0] ? y : new Big(xc[0] ? x : a * 0) } xc = xc.slice(); if (a = xe - ye) { if (a > 0) { ye = xe; t = yc } else { a = -a; t = xc } t.reverse(); for (; a--; t.push(0)) { } t.reverse() } if (xc.length - yc.length < 0) { t = yc; yc = xc; xc = t } a = yc.length; for (b = 0; a;) { b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0; xc[a] %= 10 } if (b) { xc.unshift(b); ++ye } for (a = xc.length; xc[--a] === 0; xc.pop()) { } y.c = xc; y.e = ye; return y }; P.pow = function (n) { var x = this, one = new x.constructor(1), y = one, isNeg = n < 0; if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) { throwErr("!pow!") } n = isNeg ? -n : n; for (; ;) { if (n & 1) { y = y.times(x) } n >>= 1; if (!n) { break } x = x.times(x) } return isNeg ? one.div(y) : y }; P.round = function (dp, rm) { var x = this, Big = x.constructor; if (dp == null) { dp = 0 } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) { throwErr("!round!") } rnd(x = new Big(x), dp, rm == null ? Big.RM : rm); return x }; P.sqrt = function () { var estimate, r, approx, x = this, Big = x.constructor, xc = x.c, i = x.s, e = x.e, half = new Big("0.5"); if (!xc[0]) { return new Big(x) } if (i < 0) { throwErr(NaN) } i = Math.sqrt(x.toString()); if (i === 0 || i === 1 / 0) { estimate = xc.join(""); if (!(estimate.length + e & 1)) { estimate += "0" } r = new Big(Math.sqrt(estimate).toString()); r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1) } else { r = new Big(i.toString()) } i = r.e + (Big.DP += 4); do { approx = r; r = half.times(approx.plus(x.div(approx))) } while (approx.c.slice(0, i).join("") !== r.c.slice(0, i).join("")); rnd(r, Big.DP -= 4, Big.RM); return r }; P.mul = P.times = function (y) { var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e; y.s = x.s == y.s ? 1 : -1; if (!xc[0] || !yc[0]) { return new Big(y.s * 0) } y.e = i + j; if (a < b) { c = xc; xc = yc; yc = c; j = a; a = b; b = j } for (c = new Array(j = a + b) ; j--; c[j] = 0) { } for (i = b; i--;) { b = 0; for (j = a + i; j > i;) { b = c[j] + yc[i] * xc[j - i - 1] + b; c[j--] = b % 10; b = b / 10 | 0 } c[j] = (c[j] + b) % 10 } if (b) { ++y.e } if (!c[0]) { c.shift() } for (i = c.length; !c[--i]; c.pop()) { } y.c = c; return y }; P.toString = P.valueOf = P.toJSON = function () { var x = this, Big = x.constructor, e = x.e, str = x.c.join(""), strL = str.length; if (e <= Big.E_NEG || e >= Big.E_POS) { str = str.charAt(0) + (strL > 1 ? "." + str.slice(1) : "") + (e < 0 ? "e" : "e+") + e } else if (e < 0) { for (; ++e; str = "0" + str) { } str = "0." + str } else if (e > 0) { if (++e > strL) { for (e -= strL; e--; str += "0") { } } else if (e < strL) { str = str.slice(0, e) + "." + str.slice(e) } } else if (strL > 1) { str = str.charAt(0) + "." + str.slice(1) } return x.s < 0 && x.c[0] ? "-" + str : str }; P.toExponential = function (dp) { if (dp == null) { dp = this.c.length - 1 } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) { throwErr("!toExp!") } return format(this, dp, 1) }; P.toFixed = function (dp) { var str, x = this, Big = x.constructor, neg = Big.E_NEG, pos = Big.E_POS; Big.E_NEG = -(Big.E_POS = 1 / 0); if (dp == null) { str = x.toString() } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) { str = format(x, x.e + dp); if (x.s < 0 && x.c[0] && str.indexOf("-") < 0) { str = "-" + str } } Big.E_NEG = neg; Big.E_POS = pos; if (!str) { throwErr("!toFix!") } return str }; P.toPrecision = function (sd) { if (sd == null) { return this.toString() } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) { throwErr("!toPre!") } return format(this, sd - 1, 2) }; Big = bigFactory(); if (typeof define === "function" && define.amd) { define(function () { return Big }) } else if (typeof module !== "undefined" && module.exports) { module.exports = Big } else { global.Big = Big } })(this);
        //End BigNumber

        $(document).ready(function () {
            $('input[name="statusButton"]').attr('type', 'button').attr('data-toggle', 'modal').attr('data-target', '#confirmationModal');
            $(".input-group.date.inmod").each(function () { $(this).datepicker("remove"); });
            FormControl();
        });

        // This must be applied to a form (or an object inside a form).
        jQuery.fn.addHidden = function (name, value) {
            return this.each(function () {
                var input = $("<input>").attr("type", "hidden").attr("name", name).val(value);
                $(this).append($(input));
            });
        };

        //Confirmation Modal
        $('input[name="statusButton"]').on('click', function (e) {
            var submitvalue = $(this).val();
            var msg = "";
            var cm = "";
            if (submitvalue === 'Save Changes') {
                msg = 'Save Changes';
                cm = "save all changes";
            } else if (submitvalue === 'Submit') {
                msg = 'Submit';
                cm = "submit data";
            }

            $('.msgModal').text(msg);
            $('.confirmationMessage').text(cm);
            $('#submitButtonText').val(submitvalue);
        });

        $('#confirmModal').click(function (e) {
            var submitvalue = $('#submitButtonText').val();
            $('form:first').addHidden('statusButton', submitvalue).trigger('submit');
            $(this).prop('disabled', true);
        });

        $("#SpecialInvoice").on("click", function () {
            $("span[data-valmsg-for='SpecialInvoiceIssueDate']").hide();
            SpecialInvoice($(this).prop("checked"));
        });

        $("#ApprovalAdjustmentMemo").on("click", function () {
            $("span[data-valmsg-for='AdjustmentBreakdownAmount']").hide();
            ApprovalAdjustmentMemo($(this).prop("checked"));
        });

        $("#IncludePPh").bind('change', function () { RecalculateExpColAmt(); });
        $("#AdjustmentBreakdownAmount").bind('input propertychange', function () { RecalculateExpColAmt(); });
        $("#AdjustmentBreakdownAmount").bind('focus', function () { $(this).select(); });

        $(".money").bind('input propertychange', function () {
            if (isNaN($(this).val().replace(/,/gi, '')))
                $(this).val("");
            else {
                AddThousandSeperator($(this));
            }
        });

        $(".money").keydown(function (event) {
            if ($(this).val().replace(/,/gi, '').length >= 18) {
                if (!(event.keyCode == 8 || event.keyCode == 46 || event.keyCode == 35 || event.keyCode == 36 || (event.shiftKey && (event.keyCode >= 35 && event.keyCode <= 40))))
                    event.preventDefault();
            }
            else {
                if (event.keyCode == 110 || event.keyCode == 190)
                    event.preventDefault();
                else {
                    if (!event.ctrlKey && ((event.keyCode >= 65 && event.keyCode <= 90) || event.keyCode >= 186 && event.keyCode <= 192 || event.keyCode >= 219 && event.keyCode <= 222))
                        event.preventDefault();
                    else if (event.shiftKey && (event.keyCode >= 48 && event.keyCode <= 57))
                        event.preventDefault();
                }
            }
        });

        function FormControl() {
            SpecialInvoice($("#SpecialInvoice").prop("checked"));
            ApprovalAdjustmentMemo($("#ApprovalAdjustmentMemo").prop("checked"));
        }

        function SpecialInvoice(val) {
            if (val) {
                $("#SpecialInvoiceIssueDate").prop("readonly", false);
                $("#SpecialInvoiceIssueDate").datepicker({
                    format: "mm/dd/yyyy",
                    orientation: "auto top",
                    container: this
                });
            }
            else {
                $("#SpecialInvoiceIssueDate").prop("readonly", true);
                $("#SpecialInvoiceIssueDate").datepicker('setDate', null);
                $("#SpecialInvoiceIssueDate").datepicker("remove");
            }
        }

        function ApprovalAdjustmentMemo(val) {
            if (val) {
                $("#AdjustmentBreakdownAmount").prop("readonly", false);
            }
            else {
                $("#AdjustmentBreakdownAmount").prop("readonly", true);
                $("#AdjustmentBreakdownAmount").val(0);
            }
        }

        function RecalculateExpColAmt() {
            var IsBreakdown = $("#ApprovalAdjustmentMemo").prop("checked");
            var IsPPH = $("#IncludePPh").val();
            var billingamount = $("#BillingTotal").val().replace(/,/gi, '');
            var breakdownamount = $("#AdjustmentBreakdownAmount").val().replace(/,/gi, '');
            var BillingAmount = new Big(!isNaN(parseFloat(billingamount)) ? billingamount : 0);
            var BreakdownAmount = new Big(!isNaN(parseFloat(breakdownamount)) ? breakdownamount : 0);
            var BilBreak = BillingAmount.sub(BreakdownAmount);
            var ReCalculate = BilBreak.add(BilBreak.times(10).div(100)).sub(BilBreak.times(2).div(100));
            $("#ExpectationCollectionAmount").val(ReCalculate);
            AddThousandSeperator($("#ExpectationCollectionAmount"));
        }

        // For adding thousand separator into input text
        // parameter: jquery input object
        function AddThousandSeperator(jInputControl) {
            var num = jInputControl.val().replace(/,/gi, "").split("").reverse().join("");
            var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
            if (num2.indexOf("-,") == 0) num2 = num2.replace("-,", "-");
            jInputControl.val(num2);
        }

        // for removing rouge char
        // parameter: string to remove rouge char
        function RemoveRougeChar(convertString) {
            if (convertString.substring(0, 1) === ",")
                return convertString.substring(1, convertString.length);
            return convertString;
        }

    </script>
}